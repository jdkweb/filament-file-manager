<?php

namespace Jdkweb\FilamentFileManager\Models;

use App\Models\User;
use Filament\Actions\Action;
use Filament\Forms\Components\TextInput;
use Filament\Notifications\Notification;
use Illuminate\Database\Eloquent\Model;
use Illuminate\Database\Eloquent\Relations\MorphTo;
use Illuminate\Database\Eloquent\Relations\MorphToMany;
use Spatie\MediaLibrary\HasMedia;
use Spatie\MediaLibrary\InteractsWithMedia;

class Folder extends Model implements HasMedia
{
    use InteractsWithMedia;

    protected $fillable = [
        'parent_id',
        'model_type',
        'model_id',
        'name',
        'collection',
        'description',
        'icon',
        'color',
        'is_protected',
        'password',
        'is_hidden',
        'is_favorite',
        'is_public',
        'has_user_access',
        'user_id',
        'user_type',
    ];

    protected $casts = [
        'is_protected' => 'boolean',
        'is_hidden' => 'boolean',
        'is_favorite' => 'boolean',
        'is_public' => 'boolean',
        'has_user_access' => 'boolean'
    ];

    public function model(): MorphTo
    {
        return $this->morphTo();
    }

    public function user(): MorphTo
    {
        return $this->morphTo();
    }

    /**
     * Get the user's models
     *
     * @return \Illuminate\Database\Eloquent\Relations\MorphToMany
     */
    public function users(): MorphToMany
    {
        return $this->morphedByMany(
            User::class,
            'model',
            'folder_has_models',
            'folder_id',
            'model_id'
        );
    }

    protected static function boot()
    {
        parent::boot(); // TODO: Change the autogenerated stub

        static::addGlobalScope('user', function ($query) {
            if(filament('filament-file-manager')->allowUserAccess && auth()->check()){
                $query
                    ->where('user_id', auth()->id())
                    ->orWhere('is_public',false)
                    ->where('has_user_access', true)
                    ->whereHas('users', function ($query) {
                        $query->where('model_id', auth()->id())
                            ->where('model_type', get_class(auth()->user()));
                    })
                    ->orWhere('is_public', true);
            }
        });

    }

    public function folders()
    {
        return $this->hasMany(Folder::class, 'parent_id');
    }

    public function parent()
    {
        return $this->belongsTo(Folder::class, 'parent_id');
    }



    public function folderAction(?Folder $item=null){

        return Action::make('folderAction')
              ->label("View Folder model")
//            ->requiresConfirmation(function (array $arguments){
//                if($arguments['record']['is_protected']){
//                    return true;
//                }
//                else {
//                    return false;
//                }
//            })
//            ->form(function (array $arguments){
//                if($arguments['record']['is_protected']){
//                    return [
//                        TextInput::make('password')
//                            ->password()
//                            ->revealable()
//                            ->required()
//                            ->maxLength(255),
//                    ];
//                }
//                else {
//                    return null;
//                }
//            })
            ->action(function (array $arguments, array $data){
                dd($arguments);
            })
//            ->action(function (array $arguments, array $data){
//                if($arguments['record']['is_protected']){
//                    if($arguments['record']['password'] != $data['password']){
//                        Notification::make()
//                            ->title('Password is incorrect')
//                            ->danger()
//                            ->send();
//
//                        return ;
//                    }
//                    else {
//                        session()->put('folder_password', $data['password']);
//                    }
//                }
//                if(!$arguments['record']['model_type']){
//                    if(filament()->getTenant()){
//                        return redirect()->to(url(filament()->getCurrentPanel()->getId() .'/'. filament()->getTenant()->id . '/media?folder_id='.$arguments['record']['id']));
//                    }
//                    else {
//                        return redirect()->route('filament.'.filament()->getCurrentPanel()->getId().'.resources.media.index', ['folder_id' => $arguments['record']['id']]);
//                    }
//                }
//                if(!$arguments['record']['model_id'] && !$arguments['record']['collection']){
//                    if(filament()->getTenant()){
//                        return redirect()->to(url(filament()->getCurrentPanel()->getId() .'/'. filament()->getTenant()->id . '/folders?model_type='.$arguments['record']['model_type']));
//                    }
//                    else {
//                        return redirect()->route('filament.'.filament()->getCurrentPanel()->getId().'.resources.folders.index', ['model_type' => $arguments['record']['model_type']]);
//                    }
//                }
//                else if(!$arguments['record']['model_id']){
//                    if(filament()->getTenant()){
//                        return redirect()->to(url(filament()->getCurrentPanel()->getId() .'/'. filament()->getTenant()->id . '/folders?model_type='.$arguments['record']['model_type'].'&collection='.$arguments['record']['collection']));
//                    }
//                    else {
//                        return redirect()->route('filament.'.filament()->getCurrentPanel()->getId().'.resources.folders.index', ['model_type' => $arguments['record']['model_type'], 'collection' => $arguments['record']['collection']]);
//                    }
//                }
//                else {
//                    if(filament()->getTenant()) {
//                        return redirect()->to(url(filament()->getCurrentPanel()->getId() .'/'. filament()->getTenant()->id . '/media?folder_id='.$arguments['record']['id']));
//                    }
//                    else {
//                        return redirect()->route('filament.'.filament()->getCurrentPanel()->getId().'.resources.media.index', ['folder_id' => $arguments['record']['id']]);
//                    }
//                }
//            })
            ->view('filament-file-manager::folder-action', ['item' => $item]);
    }
}
