<?php

namespace Jdkweb\FilamentFileManager\Resources\MediaResource\Pages;

use App\Models\User;
use Filament\Actions\Action;
use Filament\Forms\Components\FileUpload;
use Filament\Forms\Components\Grid;
use Filament\Forms;
use Filament\Forms\Components\Repeater;
use Filament\Forms\Components\Textarea;
use Filament\Forms\Components\TextInput;
use Filament\Notifications\Notification;
use Filament\Resources\Pages\ManageRecords;
use Filament\Tables\Actions\EditAction;
use Illuminate\Contracts\Support\Htmlable;
use Illuminate\Contracts\View\View;
use Illuminate\Database\Eloquent\Model;
use Illuminate\Support\Str;
use Livewire\Component;
use TomatoPHP\FilamentIcons\Components\IconPicker;
use Jdkweb\FilamentFileManager\Models\Folder;
use Jdkweb\FilamentFileManager\Models\Media;
use Jdkweb\FilamentFileManager\Resources\Actions\CreateMediaAction;
use Jdkweb\FilamentFileManager\Resources\MediaResource\Actions\CreateSubFolderAction;
use Jdkweb\FilamentFileManager\Resources\Actions\DeleteFolderAction;
use Jdkweb\FilamentFileManager\Resources\MediaResource\Actions\EditCurrentFolderAction;
use Jdkweb\FilamentFileManager\Resources\MediaResource;
use Filament\Actions;
use Filament\Resources\Pages\ListRecords;

class ListMedia extends ManageRecords
{
    protected static string $resource = MediaResource::class;

    public ?int $folder_id = null;
    public ?Folder $folder = null;


    public function getTitle(): string|Htmlable
    {
        return $this->folder->name; // TODO: Change the autogenerated stub
    }

    public function mount(): void
    {
        parent::mount(); // TODO: Change the autogenerated stub


        if(!request()->has('folder_id')){
            abort(404, 'Folder ID is required');
        }

        $folder = Folder::find(request()->get('folder_id'));
        if(!$folder){
            abort(404, 'Folder ID is required');
        }
        else {
            if($folder->is_protected && !session()->has('folder_password')){
                abort(403, 'You Cannot Access This Folder');
            }
        }

        $this->folder = $folder;
        $this->folder_id = request()->get('folder_id');
        session()->put('folder_id', $this->folder_id);
    }

    /**
     * Header action buttons in top of the page
     *
     * @return Action[]
     */
    protected function getHeaderActions(): array
    {
        return [
            $this->uploadMediaAction(),
            EditCurrentFolderAction::make($this->folder_id),
            CreateSubFolderAction::make($this->folder_id),
        ];
    }

    /**
     * CreateAction, action to upload new file
     *
     * @return Action
     */
    protected function uploadMediaAction(): Action
    {
        return Actions\CreateAction::make()
            ->label(__('filament-file-manager::messages.media.actions.create.label'))
            ->icon('heroicon-s-arrow-up-tray')
            ->extraAttributes(['style' => 'padding: 12px 22px; font-size: 14px;'])
            ->action(function (array $data, Component $livewire) {
                $upload_file = reset($livewire->mountedActionsData[0]['file']);
                if($livewire->folder &&
                    $upload_file instanceof \Livewire\Features\SupportFileUploads\TemporaryUploadedFile){
                    if($livewire->folder->model){
                        $livewire->folder->model->addMedia($livewire->mountedActionsData[0]['file'])
                            ->withCustomProperties([
                                'title' => $data['title'],
                                'description' => $data['description']
                            ])
                            ->toMediaCollection($livewire->folder->model->collection);
                    }
                    else {
                        $livewire->folder->addMedia($upload_file)
                            ->withCustomProperties([
                                'title' => $data['title'],
                                'description' => $data['description']
                            ])
                            ->toMediaCollection($livewire->folder->collection);
                    }

                }

                Notification::make()->title(__('filament-file-manager::messages.media.notifications.create-media'))->send();
            });
    }

    /**
     * Action buttons in the right top (+Add Media ...)
     *
     * @return array
     */
    protected function __getHeaderActions(): array
    {
        $folder_id = $this->folder_id;

        $folder = config('filament-file-manager.model.folder')::find($folder_id);

        if(filament('filament-file-manager')->allowUserAccess && (!empty($folder->user_id))){
            if($folder->user_id === auth()->user()->id && $folder->user_type === get_class(auth()->user())){
                return [
                    CreateMediaAction::make($folder_id),
                    CreateSubFolderAction::make($folder_id),
                    DeleteFolderAction::make($folder_id),
                    EditCurrentFolderAction::make($folder_id),
                ];
            }
            else {
                return [];
            }
        }
        else {
            return [
                CreateMediaAction::make($folder_id),
                CreateSubFolderAction::make($folder_id),
                DeleteFolderAction::make($folder_id),
                EditCurrentFolderAction::make($folder_id),
            ];
        }
    }

    public function folderAction(?Folder $item=null){
        return Actions\Action::make('folderAction')
            ->requiresConfirmation(function (array $arguments){
                if($arguments['record']['is_protected']){
                    return true;
                }
                else {
                    return false;
                }
            })
            ->form(function (array $arguments){
                if($arguments['record']['is_protected']){
                    return [
                        TextInput::make('password')
                            ->password()
                            ->revealable()
                            ->required()
                            ->maxLength(255),
                    ];
                }
                else {
                    return null;
                }
            })
            ->action(function (array $arguments, array $data){
                if($arguments['record']['is_protected']){
                    if($arguments['record']['password'] != $data['password']){
                        Notification::make()
                            ->title('Password is incorrect')
                            ->danger()
                            ->send();

                        return;
                    }
                    else {
                        session()->put('folder_password', $data['password']);
                    }
                }
                if(!$arguments['record']['model_type']){
                    if(filament()->getTenant()){
                        return redirect()->to(url(filament()->getCurrentPanel()->getId() .'/'. filament()->getTenant()->id . '/media?folder_id='.$arguments['record']['id']));
                    }
                    else {
                        return redirect()->route('filament.'.filament()->getCurrentPanel()->getId().'.resources.media.index', ['folder_id' => $arguments['record']['id']]);
                    }
                }
                if(!$arguments['record']['model_id'] && !$arguments['record']['collection']){
                    if(filament()->getTenant()){
                        return redirect()->to(url(filament()->getCurrentPanel()->getId() .'/'. filament()->getTenant()->id . '/folders?model_type='.$arguments['record']['model_type']));
                    }
                    else {
                        return redirect()->route('filament.'.filament()->getCurrentPanel()->getId().'.resources.folders.index', ['model_type' => $arguments['record']['model_type']]);
                    }
                }
                else if(!$arguments['record']['model_id']){
                    if(filament()->getTenant()){
                        return redirect()->to(url(filament()->getCurrentPanel()->getId() .'/'. filament()->getTenant()->id . '/folders?model_type='.$arguments['record']['model_type'].'&collection='.$arguments['record']['collection']));
                    }
                    else {
                        return redirect()->route('filament.'.filament()->getCurrentPanel()->getId().'.resources.folders.index', ['model_type' => $arguments['record']['model_type'], 'collection' => $arguments['record']['collection']]);
                    }
                }
                else {
                    if(filament()->getTenant()) {
                        return redirect()->to(url(filament()->getCurrentPanel()->getId() .'/'. filament()->getTenant()->id . '/media?folder_id='.$arguments['record']['id']));
                    }
                    else {
                        return redirect()->route('filament.'.filament()->getCurrentPanel()->getId().'.resources.media.index', ['folder_id' => $arguments['record']['id']]);
                    }
                }
            })
            ->view('filament-file-manager::components.folder-action-filament-actions', ['item' => $item]);
    }


    public function deleteMedia()
    {
        return Actions\Action::make('deleteMedia')
            ->label("XXX" . __('filament-file-manager::messages.media.meta.delete-media'))
            ->icon('heroicon-s-trash')
            ->color('danger')
            ->requiresConfirmation()
            ->action(function (array $arguments) {
                $media = Media::find($arguments['record']['id']);
                $media->delete();

                Notification::make()
                    ->title("OOOO" . __('filament-file-manager::messages.media.notifications.delete-folder'))
                    ->success()
                    ->send();
            });

    }
}
