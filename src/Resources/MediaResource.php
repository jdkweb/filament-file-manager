<?php

namespace Jdkweb\FilamentFileManager\Resources;

use App\Forms\Components\view;
use App\Tables\Columns\MediaCard;
use drh2so4\Thumbnail\Traits\Thumbnail;
use Filament\Actions\Action;
use Filament\Facades\Filament;
use Filament\Infolists\Components\ImageEntry;
use Filament\Infolists\Components\TextEntry;
use Filament\Infolists\Infolist;
use Filament\Notifications\Notification;
use Filament\Support\Enums\ActionSize;
use Illuminate\Database\Eloquent\Model;
use Illuminate\Support\Facades\Storage;
use Livewire\Component;
use Jdkweb\FilamentFileManager\Models\Folder;
use Jdkweb\FilamentFileManager\Resources\MediaResource\Actions\CreateEditAction;
use Jdkweb\FilamentFileManager\Resources\MediaResource\Actions\CreateViewAction;
use Jdkweb\FilamentFileManager\Resources\MediaResource\Pages;
use Jdkweb\FilamentFileManager\Resources\MediaResource\RelationManagers;
use Jdkweb\FilamentFileManager\Models\Media;
use Filament\Forms;
use Filament\Forms\Form;
use Filament\Resources\Resource;
use Filament\Tables;
use Filament\Tables\Table;
use Illuminate\Database\Eloquent\Builder;
use Illuminate\Database\Eloquent\SoftDeletingScope;

class MediaResource extends Resource
{
    use Thumbnail;

    protected static bool $isScopedToTenant = false;
    protected static ?string $navigationIcon = 'heroicon-o-rectangle-stack';

    protected static bool $shouldRegisterNavigation = false;

    public static function getModel(): string
    {
        return config('filament-file-manager.model.media'); // TODO: Change the autogenerated stub
    }

    public static function getPluralLabel(): ?string
    {
        return __('filament-file-manager::messages.media.title');
    }

    public static function getLabel(): ?string
    {
        return __('filament-file-manager::messages.media.single'); // TODO: Change the autogenerated stub
    }

    /**
     * @param  string|null  $breadcrumb
     */
    public static function setBreadcrumb(?string $breadcrumb): void
    {
        self::$breadcrumb = $breadcrumb;
    }

    public static function form(Form $form): Form
    {
        return $form->schema(Media::getForm());

    }

    public static function table(Table $table): Table
    {
        return $table
            ->modifyQueryUsing(function (Builder $query) {
                $query->leftJoin('folders', 'folders.model_id', '=', 'media.model_id')
                    ->selectRaw("media.*,
                        folders.id as folder_id,
                        folders.name as folder_name,
                        folders.icon as folder_icon,
                        folders.color as folder_color");
            })
            //->emptyState(fn(): \Illuminate\View\View => view('filament-file-manager::pages.media'))
            //->content(fn(): \Illuminate\View\View => view('filament-file-manager::pages.media'))
            ->columns([
                // Search fields
                Tables\Columns\Layout\Split::make([
                    Tables\Columns\TextColumn::make('name')
                        ->label(false)
                        ->extraAttributes(['style' => 'display:none'])
                        ->hidden()
                        ->sortable()
                        ->searchable(),
                    Tables\Columns\TextColumn::make('file_name')
                        ->label(__('filament-file-manager::messages.media.columns.image'))
                        ->extraAttributes(['style' => 'display:none'])
                        ->sortable()
                        ->searchable(),
                    Tables\Columns\TextColumn::make('custom_properties')
                        ->label(__('filament-file-manager::messages.media.columns.description'))
                        ->extraAttributes(['style' => 'display:none'])
                        ->sortable()
                        ->searchable(),
                    Tables\Columns\TextColumn::make('size')
                        ->label(__('filament-file-manager::messages.media.columns.size'))
                        ->extraAttributes(['style' => 'display:none'])
                        ->numeric()
                        ->sortable(),
                    Tables\Columns\TextColumn::make('order_column')
                        ->label(__('filament-file-manager::messages.media.columns.order_column'))
                        ->extraAttributes(['style' => 'display:none'])
                        ->numeric()
                        ->sortable(),
                    Tables\Columns\TextColumn::make('created_at')
                        ->dateTime()
                        ->hidden()
                        ->sortable(),
                    Tables\Columns\TextColumn::make('updated_at')
                        ->dateTime()
                        ->hidden()
                        ->sortable(),
                ]),
                Tables\Columns\Layout\View::make('filament-file-manager::card-slot'),
                // Tables\Columns\Layout\View::make('filament-file-manager::card-slot-folder')
            ])
            ->contentGrid([
                'md' => 2,
                'lg' => 2,
                'xl' => 3,
                '2xl' => 4,
            ])
            ->defaultSort('order_column', 'asc')
            ->actions([
                CreateEditAction::make(),
                CreateViewAction::make(),
                Tables\Actions\DeleteAction::make()
                    ->requiresConfirmation()
                    ->label(false)
                    //->view('filament-file-manager::livewire.card-button-view') @TODO action view
                    ->size(ActionSize::ExtraLarge)
                    ->action(fn($record) => self::deleteMediaItem($record))
            ])
            ->defaultPaginationPageOption(12)
            ->paginationPageOptions([
                "12",
                "24",
                "48",
                "96",
            ])
            ->bulkActions([
                Tables\Actions\BulkActionGroup::make([
                    Tables\Actions\DeleteBulkAction::make()
                    ->action(function($records) {
                        if($records->count() < 1) return;
                        $records->each(fn($record) => self::deleteMediaItem($record));
                    }),
                ]),
            ]);
    }

    /**
     * One method for (bulk) delete
     * @param  Media  $record
     * @return true
     */
    protected static function deleteMediaItem(Media $record)
    {
        $record->delete();
        // Path to file
        $path = Storage::disk(config('media-library.disk_name'))->getConfig()['root']."/";
        // Folder
        $folder = $path.$record->id;
        // Current file
        $file = $folder."/".$record->file_name;
        if(file_exists($file)) unlink($file);
        if(is_dir($folder)) rmdir($folder);

        return true;
    }

    public static function getRelations(): array
    {
        return [
            //
        ];
    }

    public static function getPages(): array
    {
        return [
            'index' => Pages\ListMedia::route('/')
        ];
    }
}
